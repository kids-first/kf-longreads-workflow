cwlVersion: v1.2
class: Workflow
id: kfdrc-ont-longreads-workflow
label: Kids First DRC ONT LongReads Workflow
doc: |-
  # Kids First Data Resource Center Oxford Nanopore Technologies Long Reads Alignment and Variant Calling Workflow

  <p align="center">
    <img src="https://github.com/d3b-center/d3b-research-workflows/raw/master/doc/kfdrc-logo-sm.png">
  </p>

  The Kids First Data Resource Center (KFDRC) Oxford Nanopore Technologies (ONT)
  Long Reads Alignment and Variant Calling Workflow is a Common Workflow Language
  (CWL) implementation of various softwares used to take reads information
  generated by ONT long reads sequencers and generate alignment and variant
  information.

  ## Relevant Softwares and Versions
  - [samtools head](http://www.htslib.org/doc/samtools-head.html): `1.15.1`
  - [samtools fastq](http://www.htslib.org/doc/samtools-fastq.html): `1.15.1`
  - [Sentieon Minimap2](https://support.sentieon.com/manual/usages/general/?highlight=minimap2#minimap2-binary): `202112.01`
  - [Sentieon util sort](https://support.sentieon.com/manual/usages/general/?highlight=minimap2#util-binary): `202112.01`
  - [LongReadSum](https://github.com/WGLab/LongReadSum#readme): [Unversioned commit](https://github.com/WGLab/LongReadSum/commit/125cd78e49bc4a402d289baa687acf35b555d3e5)
  - [Sniffles](https://github.com/fritzsedlazeck/Sniffles#readme): `2.0.3`
  - [CuteSV](https://github.com/tjiangHIT/cuteSV#readme): `1.0.13`
  - [Nanocaller](https://github.com/WGLab/NanoCaller#readme): `2.1.2`

  ## Input Files
  - `input_unaligned_bam`: The primary input of the ONT Long Reads Workflow is an unaligned BAM and associated index.
  - `indexed_reference_fasta`: Any suitable human reference genome. KFDRC uses `Homo_sapiens_assembly38.fasta` from Broad Institute.

  ## Output Files
  - `cutesv_structural_variants`: BGZIP and TABIX indexed VCF containing structural variant calls made by CuteSV on the `minimap2_aligned_bam`.
  - `longreadsum_bam_metrics`: BGZIP TAR containing various metrics collected by LongReadSum from the `minimap2_aligned_bam`.
  - `minimap2_aligned_bam`: Indexed BAM file containing reads from the `input_unaligned_bam` aligned to the `indexed_reference_fasta`.
  - `nanocaller_small_variants`: BGZIP and TABIX indexed VCF containing small variant calls made by Nanocaller on the `minimap2_aligned_bam`.
  - `sniffles_structural_variants`: BGZIP and TABIX indexed VCF containing structural variant calls made by Sniffles on the `minimap2_aligned_bam`.

  ## Generalized Process
  1. Read group information (`@RG`) is harvested from the `input_unaligned_bam` header using `samtools head` and `grep`.
  1. If user provides `biospecimen_name` input, that value replaces the `SM` value pulled in the preceeding step.
  1. Align `input_unaligned_bam` to `indexed_reference_fasta` with tohe above `@RG` information using samtools fastq, Sentieon Minimap2, and Sentieon sort.
  1. Generate long reads alignment metrics from the `minimap2_aligned_bam` using LongReadSum.
  1. Generate structural variant calls from the `minimap2_aligned_bam` using CuteSV.
  1. Generate structural variant calls from the `minimap2_aligned_bam` using Sniffles.
  1. Generate small variant from the `minimap2_aligned_bam` using Nanocaller_WGS.

  ## Basic Info
  - [D3b dockerfiles](https://github.com/d3b-center/bixtools)
  - Testing Tools:
      - [Seven Bridges Cavatica Platform](https://cavatica.sbgenomics.com/)
      - [Common Workflow Language reference implementation (cwltool)](https://github.com/common-workflow-language/cwltool/)

  ## References
  - KFDRC AWS s3 bucket: s3://kids-first-seq-data/broad-references/
  - Cavatica: https://cavatica.sbgenomics.com/u/kfdrc-harmonization/kf-references/
  - Broad Institute Goolge Cloud: https://console.cloud.google.com/storage/browser/genomics-public-data/resources/broad/hg38/v0/

requirements:
- class: InlineJavascriptRequirement
- class: MultipleInputFeatureRequirement
- class: ScatterFeatureRequirement
- class: StepInputExpressionRequirement
- class: SubworkflowFeatureRequirement

inputs:
  input_unaligned_bam: {type: 'File', secondaryFiles: [{pattern: '.bai', required: true}],
    doc: "Unaligned BAM file and index containing long reads generated by an ONT sequencer.",
    "sbg:fileTypes": "BAM"}
  indexed_reference_fasta: {type: 'File', secondaryFiles: [{pattern: '.fai', required: true}],
    doc: "Reference fasta and fai index.", "sbg:suggestedValue": {class: File, path: 60639014357c3a53540ca7a3,
      name: Homo_sapiens_assembly38.fasta, secondaryFiles: [{class: File, path: 60639016357c3a53540ca7af,
          name: Homo_sapiens_assembly38.fasta.fai}]}, "sbg:fileTypes": "FASTA, FA"}
  output_basename: {type: 'string', doc: "String to use as basename for all workflow\
      \ outputs."}
  biospecimen_name: {type: 'string?', doc: "String name of the biospecimen. Providing\
      \ this value will override the SM value provided in the @RG line of the input_unaligned_bam\
      \ header."}
  sentieon_license: {type: 'string', doc: "License server host and port for Sentieon\
      \ tools."}

  # Minimap2 Alignment Options
  minimap2_preset:
    type:
    - name: minimap2_preset
      type: enum
      symbols:
      - map-pb
      - map-ont
      - asm5
      - asm10
      - asm20
      - ava-pb
      - ava-ont
      - splice
      - splice:hq
      - sr
      - map-hifi
    doc: |-
      Select one of the preset options prepared by the tool authors. Selecting one of
      these options will apply multiple options at the same time.

  # NanoCaller Region Arguments
  nanocaller_interval_length: { type: 'int?', doc: "Length of split intervals. Lower the value to make smaller intervals. Increase the value to make larger intervals." }
  nanocaller_chrom: { type: 'string?', doc: "Chromosome to which calling will be restricted. Required for WXS. If running in WGS mode multiple chromosomes can be provided as a whitespace separated list (e.g. 'chr1 chr11 chr14')." }
  nanocaller_include_bed: { type: 'File?', secondaryFiles: [{pattern: ".tbi", required: true}], doc: "Only call variants inside the intervals specified in the bgzipped and tabix indexed BED file. If any other flags are used to specify a region, intersect the region with intervals in the BED file, e.g. if -chom chr1 -start 10000000 -end 20000000 flags are set, c all variants inside the intervals specified by the BED file that overlap with chr1:10000000-20000000. Same goes for the case when whole genome variant calling flag is set." }
  nanocaller_wgs_contigs_type:
    type:
      - 'null'
      - type: enum
        name: nanocaller_wgs_contigs_type
        symbols: ["with_chr", "without_chr", "all"]
    doc: |
      Options are "with_chr", "without_chr" and "all", "with_chr"
      option will assume human genome and run NanoCaller on chr1-22, "without_chr"
      will run on chromosomes 1-22 if the BAM and reference genome files use
      chromosome names without "chr". "all" option will run NanoCaller on each contig
      present in reference genome FASTA file.

  # Nanocaller Calling Options
  nanocaller_preset:
    type:
      type: enum
      name: nanocaller_preset
      symbols: ["ont", "ul_ont", "ul_ont_extreme", "ccs", "clr"]
    doc: |
      Apply recommended preset values for SNP and Indel calling parameters, options
      are 'ont', 'ul_ont', 'ul_ont_extreme', 'ccs' and 'clr'. 'ont' works well for
      any type of ONT sequencing datasets. However, use 'ul_ont' if you have several
      ultra-long ONT reads up to 100kbp long, and 'ul_ont_extreme' if you have
      several ultra-long ONT reads up to 300kbp long. For PacBio CCS (HiFi) and CLR
      reads, use 'ccs'and 'clr' respectively. Presets are described in detail here:
      github.com/WGLab/NanoCaller/blob/master/docs/Usage.md#preset-options.
  nanocaller_snp_model: {type: 'string?', doc: "NanoCaller SNP model to be used"}
  nanocaller_neighbor_threshold: {type: 'string?', doc: "SNP neighboring site thresholds\
      \ with lower and upper bounds seperated by comma, for Nanopore reads '0.4,0.6'\
      \ is recommended, for PacBio CCS anc CLR reads '0.3,0.7' and '0.3,0.6' are recommended\
      \ respectively"}
  nanocaller_indel_model: {type: 'string?', doc: "NanoCaller indel model to be used"}
  nanocaller_ins_threshold: {type: 'float?', doc: "Insertion Threshold"}
  nanocaller_del_threshold: {type: 'float?', doc: "Deletion Threshold"}
  nanocaller_win_size: {type: 'int?', doc: "Size of the sliding window in which the\
      \ number of indels is counted to determine indel candidate site.  Only indels\
      \ longer than 2bp are counted in this window. Larger window size can increase\
      \ recall, but use a maximum of 50 only"}
  nanocaller_small_win_size: {type: 'int?', doc: "Size of the sliding window in which\
      \ indel frequency is determined for small indels"}

  # CuteSV SV Calling Options
  cutesv_genotype: {type: 'boolean?', doc: "Enable to generate genotypes."}
  cutesv_max_cluster_bias_DEL: {type: 'int?', default: 100, doc: "Maximum distance\
      \ to cluster read together for deletion."}
  cutesv_diff_ratio_merging_DEL: {type: 'float?', default: 0.3, doc: "Do not merge\
      \ breakpoints with basepair identity more than the ratio of default for deletion."}

  # Sniffles SV Calling Options
  sniffles_tandem_repeats_input_bed: {type: 'File?', doc: "Sniffles input .bed file\
      \ containing tandem repeat annotations for the input reference genome. Providing\
      \ this file can improve Sniffles call accuracy."}
  sniffles_non_germline: {type: 'boolean?', doc: "Request that Sniffles call non-germline\
      \ SVs (rare, somatic or mosaic SVs)."}

  # Resource Control
  minimap2_cores: {type: 'int?', doc: "CPU Cores for minimap2 to use."}
  minimap2_ram: {type: 'int?', doc: "RAM (in GB) for minimap2 to use."}
  nanocaller_cores: {type: 'int?', default: 5, doc: "CPU Cores for nanocaller to use."}
  nanocaller_ram: {type: 'int?', default: 5, doc: "RAM (in GB) for nanocaller to use."}
  longreadsum_cores: {type: 'int?', doc: "CPU Cores for longreadsum to use."}
  cutesv_cores: {type: 'int?', doc: "CPU Cores for cutesv to use."}
  cutesv_ram: {type: 'int?', doc: "RAM (in GB) for cutesv to use."}
  sniffles_cores: {type: 'int?', doc: "CPU Cores for sniffles to use."}
  sniffles_ram: {type: 'int?', doc: "RAM (in GB) for sniffles to use."}

outputs:
  minimap2_aligned_bam: {type: 'File', secondaryFiles: [{pattern: '.bai', required: true}],
    outputSource: minimap2/out_alignments, doc: "Aligned BAM file from Minimap2."}
  nanocaller_small_variants: {type: 'File', secondaryFiles: [{pattern: '.tbi', required: true}],
    outputSource: nanocaller_merge_final/merged_vcf, doc: "VCF.GZ file and index containing\
      \ NanoCaller-gerated small variant calls."}
  longreadsum_bam_metrics: {type: 'File', outputSource: tar_longreadsum_dir/output,
    doc: "TAR.GZ file containing longreadsum-generated metrics."}
  cutesv_structural_variants: {type: 'File', secondaryFiles: [{pattern: '.tbi', required: true}],
    outputSource: bgzip_tabix_index_cutesv_vcf/output, doc: "VCF.GZ file and index\
      \ containing cutesv-generated SV calls."}
  sniffles_structural_variants: {type: 'File', secondaryFiles: [{pattern: '.tbi',
        required: true}], outputSource: sniffles/output_vcf, doc: "VCF.GZ file and\
      \ index containing sniffles-generated SV calls."}

steps:
  samtools_head_rg:
    run: ../tools/samtools_head.cwl
    in:
      input_bam: input_unaligned_bam
      line_filter:
        valueFrom: "@RG"
    out: [header_file]

  update_rg_sm:
    run: ../tools/expression_preparerg.cwl
    in:
      rg: samtools_head_rg/header_file
      sample: biospecimen_name
    out: [rg_str]

  minimap2:
    run: ../tools/sentieon_minimap2.cwl
    in:
      in_reads:
        source: input_unaligned_bam
        valueFrom: $([self])
      reference: indexed_reference_fasta
      input_type:
        valueFrom: 'uBAM'
      output_basename:
        source: output_basename
        valueFrom: $(self).minimap2
      sentieon_license: sentieon_license
      preset_option: minimap2_preset
      read_group_line: update_rg_sm/rg_str
      cpu_per_job: minimap2_cores
      mem_per_job: minimap2_ram
    out: [out_alignments]

  nanocaller_scatter:
    run: ../tools/nanocaller_scatter.cwl
    in:
      input_bam: minimap2/out_alignments
      reference_fai:
        source: indexed_reference_fasta
        valueFrom: $(self.secondaryFiles[0])
      interval_length: nanocaller_interval_length
      chrom: nanocaller_chrom
      include_bed: nanocaller_include_bed
      wgs_contigs_type: nanocaller_wgs_contigs_type
    out: [scattered_interval_beds]

  nanocaller:
    run: ../tools/nanocaller.cwl
    scatter: [include_bed]
    hints:
    - class: sbg:AWSInstanceType
      value: c5.12xlarge
    in:
      wgs_mode:
        valueFrom: $(1 == 0)
      input_bam: minimap2/out_alignments
      indexed_reference_fasta: indexed_reference_fasta
      chrom:
        valueFrom: $(inputs.include_bed.basename.split('_').slice(0,-4).join('_'))
      output_basename:
        source: output_basename
        valueFrom: $(self).nanocaller
      include_bed: nanocaller_scatter/scattered_interval_beds
      preset: nanocaller_preset
      snp_model: nanocaller_snp_model
      neighbor_threshold: nanocaller_neighbor_threshold
      indel_model: nanocaller_indel_model
      ins_threshold: nanocaller_ins_threshold
      del_threshold: nanocaller_del_threshold
      win_size: nanocaller_win_size
      small_win_size: nanocaller_small_win_size
      cores: nanocaller_cores
      ram: nanocaller_ram
    out: [snps_unphased_vcf, snps_phased_vcf, indels_vcf, final_vcf, fail_logs, fail_cmds,
      logs]

  nanocaller_merge_snps_unphased:
    run: ../tools/nanocaller_merge.cwl
    in:
      input_vcfs: nanocaller/snps_unphased_vcf
      output_basename:
        source: output_basename
        valueFrom: $(self).nanocaller.snps
    out: [merged_vcf]

  nanocaller_merge_snps_phased:
    run: ../tools/nanocaller_merge.cwl
    in:
      input_vcfs: nanocaller/snps_phased_vcf
      output_basename:
        source: output_basename
        valueFrom: $(self).nanocaller.snps.phased
    out: [merged_vcf]

  nanocaller_merge_indels:
    run: ../tools/nanocaller_merge.cwl
    in:
      input_vcfs: nanocaller/indels_vcf
      output_basename:
        source: output_basename
        valueFrom: $(self).nanocaller.indels
    out: [merged_vcf]

  nanocaller_merge_final:
    run: ../tools/nanocaller_merge.cwl
    in:
      input_vcfs: nanocaller/final_vcf
      output_basename:
        source: output_basename
        valueFrom: $(self).nanocaller.final
    out: [merged_vcf]

  longreadsum:
    run: ../tools/longreadsum.cwl
    in:
      input_type:
        valueFrom: "bam"
      input_file: minimap2/out_alignments
      output_dir:
        source: output_basename
        valueFrom: $(self).longreadsum
      output_basename:
        source: output_basename
        valueFrom: $(self).longreadsum.
      cores: longreadsum_cores
    out: [outputs]

  tar_longreadsum_dir:
    run: ../tools/tar.cwl
    in:
      output_filename:
        source: output_basename
        valueFrom: $(self).longreadsum.tar.gz
      input_dir: longreadsum/outputs
    out: [output]

  cutesv:
    run: ../tools/cutesv.cwl
    in:
      input_bam: minimap2/out_alignments
      reference_fasta: indexed_reference_fasta
      output_filename:
        source: output_basename
        valueFrom: $(self).cutesv.vcf
      max_cluster_bias_DEL: cutesv_max_cluster_bias_DEL
      diff_ratio_merging_DEL: cutesv_diff_ratio_merging_DEL
      genotype: cutesv_genotype
      cores: cutesv_cores
      ram: cutesv_ram
    out: [output_vcf]

  bgzip_tabix_index_cutesv_vcf:
    run: ../tools/bgzip_tabix_index.cwl
    in:
      input_vcf: cutesv/output_vcf
      cores: cutesv_cores
    out: [output]

  sniffles:
    run: ../tools/sniffles.cwl
    in:
      input_bam:
        source: minimap2/out_alignments
        valueFrom: $([self])
      vcf_output_filename:
        source: output_basename
        valueFrom: $(self).sniffles.vcf.gz
      reference_fasta: indexed_reference_fasta
      tandem_repeats_input_bed: sniffles_tandem_repeats_input_bed
      non_germline: sniffles_non_germline
      cores: sniffles_cores
      ram: sniffles_ram
    out: [output_vcf, output_snf]

$namespaces:
  sbg: https://sevenbridges.com
hints:
- class: "sbg:maxNumberOfParallelInstances"
  value: 2
"sbg:license": Apache License 2.0
"sbg:publisher": KFDRC
"sbg:categories":
- ALIGNMENT
- CUTESV
- DNA
- INDEL
- LONG
- LONGREADS
- LONGREADSUM
- METRICS
- MINIMAP2
- NANOCALLER
- SENTIEON
- SNIFFLES
- SNP
- SOMATIC
- STRUCTURAL
- SV
- VARIANT
- WGS
- WXS
"sbg:links":
- id: 'https://github.com/kids-first/kf-longreads-workflow/releases/tag/v1.0.0'
  label: github-release
