cwlVersion: v1.2
class: Workflow
id: sentieon-pacbio-hifi-longreads-workflow
doc: |
  Run Sentieon PacBio HiFi workflow
  Minimap2
  DNAscope
  LongReadSV
requirements:
- class: InlineJavascriptRequirement
- class: MultipleInputFeatureRequirement
- class: ScatterFeatureRequirement
- class: StepInputExpressionRequirement
- class: SubworkflowFeatureRequirement
inputs:
  input_unaligned_bam: {type: 'File', secondaryFiles: [{pattern: '.bai', required: false}],
    doc: "Unaligned BAM file and index containing long reads generated by a PacBio sequencer.",
    "sbg:fileTypes": "BAM"}
  indexed_reference_fasta: {type: 'File', secondaryFiles: [{pattern: '.fai', required: true},
      {pattern: '^.dict', required: false}], doc: "Reference fasta and fai index.",
    "sbg:suggestedValue": {class: File, path: 60639014357c3a53540ca7a3, name: Homo_sapiens_assembly38.fasta,
      secondaryFiles: [{class: File, path: 60639016357c3a53540ca7af, name: Homo_sapiens_assembly38.fasta.fai},
        {class: File, path: 60639019357c3a53540ca7e7, name: Homo_sapiens_assembly38.dict}]},
    "sbg:fileTypes": "FASTA, FA"}
  output_basename: {type: 'string', doc: "String to use as basename for all workflow\
      \ outputs."}
  sentieon_license: {type: 'string?', doc: "License server host and port for Sentieon\
      \ tools.", default: "10.5.64.221:8990"}
  dnascope_cpu: {type: 'int?', doc: "CPU Cores for dnascope to use."}
  dnascope_ram: {type: 'int?', doc: "RAM (in GB) for dnascope to use."}
outputs:
  minimap2_aligned_bam: {type: 'File', secondaryFiles: [{pattern: '.bai', required: true}],
    outputSource: array_to_file/out_alignments, doc: "Aligned BAM file from Minimap2."}
  dnascope_small_variants: {type: 'File', secondaryFiles: [{pattern: '.tbi', required: true}],
    outputSource: sentieon_longread_cli/small_variants, doc: "VCF.GZ file and index containing DNAscope-generated\
      \ small variant calls."}
  longreadsv_structural_variants: {type: 'File', secondaryFiles: [{pattern: '.tbi',
        required: true}], outputSource: sentieon_longread_cli/structural_variants, doc: "VCF.GZ\
      \ file and index containing Sentieon LongReadSV-generated SV calls."}
steps:
  download_model:
    run: ../tools/download_DNAscope_model.cwl
    in:
      model_name: 
        valueFrom: "PacBio_HiFi-WGS"
    out: [model_bundle]
  sentieon_longread_cli:
    run: ../tools/sentieon_DNAscope_LongRead_CLI.cwl
    in:
      input_bam: 
        source: 
          - input_unaligned_bam
        linkMerge: merge_nested
      reference: indexed_reference_fasta
      output_vcf:
        source: output_basename
        valueFrom: $(self).vcf.gz
      sentieon_license: sentieon_license
      model_bundle: download_model/model_bundle
      align:
        valueFrom: |
          $(1 == 1)
      tech:
        valueFrom: "HiFi"
      bam_format:
        valueFrom: |
          $(1 == 1)
      cpu_per_job: dnascope_cpu
      mem_per_job: dnascope_ram
    out: [small_variants, structural_variants, out_alignments, mosdepth_out]
  array_to_file:
    in:
      infile:
        source: sentieon_longread_cli/out_alignments
        valueFrom: |
          $(self[0])
    out: [out_alignments]
    run:
      cwlVersion: v1.2
      class: CommandLineTool
      requirements:
        - class: InlineJavascriptRequirement
      doc: |
        Select the first item from an array of BAM files.
      baseCommand: [echo, done]
      inputs:
        infile: { type: 'File', secondaryFiles: [{pattern: '.bai', required: true}]}
      outputs:
        out_alignments:
          type: File
          outputBinding:
            outputEval: |
              $(inputs.infile)
          secondaryFiles:
          - pattern: .bai
            required: true
$namespaces:
  sbg: https://sevenbridges.com

